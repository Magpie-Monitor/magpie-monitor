spring.application.name=Magpie Monitor
server.port=8080
frontend.client.url=${CLIENT_BASE_URL}
spring.datasource.url=${MANAGEMENT_DB_URL}
spring.datasource.username=${MANAGEMENT_DB_LOGIN}
spring.datasource.password=${MANAGEMENT_DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,email,profile
oauth2.google.redirect-uri=${REDIRECT_URI_AFTER_OAUTH}
spring.security.oauth2.client.registration.google.redirect-uri=${MANAGEMENT_SERVER_REDIRECT_URI}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth?access_type=offline&prompt=consent
# Customize the login page URL to include access_type=offline
spring.security.oauth2.client.registration.google.authorization-uri-template=https://accounts.google.com/o/oauth2/auth?access_type=offline&prompt=consent&response_type=code&client_id={clientId}&scope={scopes}&state={state}&redirect_uri={redirectUri}
google.oauth.cookie.exp-time=3600
encoding.cipher.secret.key=${MANAGEMENT_CIPHER_ENCRYPTION_KEY}
encoding.cipher.algorithm=AES
language.default=EN
spring.mail.host=${MANAGEMENT_EMAIL_HOST}
spring.mail.port=587
spring.mail.username=${MANAGEMENT_EMAIL_USERNAME}
spring.mail.password=${MANAGEMENT_EMAIL_PASSWORD}
spring.mail.properties.mail.transport.protocol=smtp
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
spring.mail.properties.mail.smtp.socketFactory.port=465
spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory

spring.kafka.bootstrap-servers=${KAFKA_BROKER_URL}
spring.kafka.consumer.group-id=management-service
spring.kafka.security.protocol=SASL_PLAINTEXT
spring.kafka.jaas.enabled=true
spring.kafka.properties.sasl.mechanism=PLAIN
spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
  username="${KAFKA_CLIENT_USERNAME}" \
  password="${KAFKA_CLIENT_PASSWORD}";
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

spring.data.mongodb.host=${MANAGEMENT_SERVICE_MONGODB_HOST}
spring.data.mongodb.port=${MANAGEMENT_SERVICE_MONGODB_PORT}
spring.data.mongodb.username=${MANAGEMENT_SERVICE_MONGODB_USERNAME}
spring.data.mongodb.password=${MANAGEMENT_SERVICE_MONGODB_PASSWORD}
spring.data.mongodb.database=${MANAGEMENT_SERVICE_MONGODB_DATABASE}
spring.data.mongodb.authentication-database=admin

kafka.report.generated.topic=${REPORT_GENERATED_BROKER_TOPIC}
kafka.report.requested.topic=${REPORT_REQUEST_FAILED_BROKER_TOPIC}
kafka.report.request.failed.topic=${REPORT_REQUESTED_BROKER_TOPIC}

kafka.cluster.metadata.application.topic=${CLUSTER_METADATA_APPLICATION_TOPIC}
kafka.cluster.metadata.node.topic=${CLUSTER_METADATA_NODE_TOPIC}
kafka.cluster.metadata.cluster.topic=${CLUSTER_METADATA_CLUSTER_TOPIC}